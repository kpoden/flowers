class Catalog{constructor(e){this.catalog=document.querySelector(e),this.items=this.catalog.querySelectorAll(".catalog__item"),this.init()}initGrid(){if(1200<window.innerWidth)for(let e=0;e<this.items.length;e++)e%7<3?this.items[e].classList.add("third"):3<=e%7&&e%7<7&&this.items[e].classList.add("fourth");else if(window.innerWidth<=1199&&850<window.innerWidth)for(let e=0;e<this.items.length;e++)e%5<2?this.items[e].classList.add("second"):2<=e%5&&e%5<5&&this.items[e].classList.add("third");else if(window.innerWidth<=849)for(let e=0;e<this.items.length;e++)e%3<1?this.items[e].classList.add("once"):1<=e%3&&e%3<3&&this.items[e].classList.add("second")}listenGrid(){window.addEventListener("load",()=>{this.deleteGrid(),this.initGrid()}),window.addEventListener("resize",()=>{this.deleteGrid(),this.initGrid()})}deleteGrid(){this.items.forEach(e=>{e.classList.value="catalog__item"})}init(){this.listenGrid()}}if(document.querySelector(".catalog")){const f=new Catalog(".catalog")}class Construct{constructor(e){this.construct=document.querySelector(e),this.select=this.construct.querySelector(".construct__select"),this.selectOptions=this.construct.querySelector(".construct__select-options"),this.selectInput=this.construct.querySelector(".construct__select-input"),this.selectOption=this.construct.querySelectorAll(".construct__select-item"),this.rangeSlider=this.construct.querySelector(".quant__range"),this.rangeInput=this.construct.querySelector(".quant__input"),this.init()}range(){this.rangeSlider.addEventListener("input",()=>{console.log(this.rangeSlider.value),this.rangeInput.value=this.rangeSlider.value})}selectFlowers(){this.select.addEventListener("mouseover",e=>{this.selectOptions.classList.add("options-show")}),this.select.addEventListener("mouseleave",e=>{this.selectOptions.classList.remove("options-show")}),this.selectOption.forEach(e=>{e.addEventListener("click",e=>{this.selectOption.forEach(e=>{e.classList.remove("option-selected")}),(e=e.target).classList.add("option-selected"),this.selectInput.textContent=e.textContent,this.selectInput.dataset.selected=e.textContent})})}init(){this.selectFlowers(),this.range()}}if(document.querySelector(".construct")){const m=new Construct(".construct")}function itemSliders(){if(document.querySelector(".item__slider-main")){$(".item__slider-main").slick({slidesToShow:1,slidesToScroll:1,arrows:!1,fade:!0,asNavFor:".item__slider-nav",pauseOnHover:!0,swipe:!0,infinite:!0,touchMove:!0}),$(".item__slider-nav").slick({slidesToShow:5,asNavFor:".item__slider-main",dots:!1,arrows:!1,focusOnSelect:!0,infinite:!0,draggable:!0,swipe:!0,swipeToSlide:!0,responsive:[{breakpoint:1350,settings:{slidesToShow:4}},{breakpoint:1200,settings:{slidesToShow:4}},{breakpoint:1e3,settings:{slidesToShow:5}},{breakpoint:600,settings:{slidesToShow:5}}]});document.querySelector(".item__slider-add").addEventListener("click",()=>{var e=document.querySelector(".item__add").offsetTop;window.scrollTo({top:e,behavior:"smooth"})});const e=document.querySelector(".item__slider-arrow.arr-left"),t=(e.addEventListener("click",()=>{$(".item__slider-main").slick("slickPrev")}),document.querySelector(".item__slider-arrow.arr-right"));t.addEventListener("click",()=>{$(".item__slider-main").slick("slickNext")})}if(document.querySelector(".item__add")){$(".item__add .item__add-items").slick({slidesToShow:4,dots:!0,arrows:!1,infinite:!1,draggable:!0,swipe:!0,swipeToSlide:!0,responsive:[{breakpoint:1300,settings:{slidesToShow:3}},{breakpoint:1e3,settings:{slidesToShow:2,dots:!0}},{breakpoint:670,settings:{slidesToShow:1.18}}]});const s=document.querySelector(".item__add-filters .item__slider-arrow.arr-left"),r=(s.addEventListener("click",()=>{$(".item__add-items").slick("slickPrev")}),document.querySelector(".item__add-filters .item__slider-arrow.arr-right"));r.addEventListener("click",()=>{$(".item__add-items").slick("slickNext")})}}function updateAddSlider(){let i;const o=document.querySelectorAll(".item__add-filter");o.forEach(r=>{r.addEventListener("click",e=>{o.forEach(e=>{e.classList.remove("active-filter")});var t=r.dataset.filter;r.classList.add("active-filter"),i=t;{i;const s=document.querySelectorAll(".item__add-item");document.querySelector(".basketAddItems")&&$(".basketAddItems").slick("slickGoTo",0),$(".item__add .item__add-items").slick("slickGoTo",0),s.forEach(e=>{e.classList.remove("hidden"),e.dataset.type!==i&&i?e.classList.add("hidden"):e.classList.remove("hidden")})}})})}itemSliders(),updateAddSlider();class Modal{constructor(e=""){this.modal=document.querySelector(".modal"),this.template=e,this.container=document.querySelector(".modal__content-inner"),this.init()}listenOpenTriggers(){this.triggers=document.querySelectorAll("[data-modal]"),this.triggers.forEach(e=>{e.addEventListener("click",()=>{this.templateName=e.dataset.modal,this.openModal()})})}listenOpenTriggersModal(){this.triggers=this.modal.querySelectorAll("[data-modal]"),this.triggers.forEach(e=>{e.addEventListener("click",()=>{this.templateName=e.dataset.modal,this.openModal()})})}listenCloseTriggers(){this.close=document.querySelectorAll(".modal__close"),this.close.forEach(e=>{e.addEventListener("click",()=>{this.closeModal()})}),this.modal.addEventListener("click",e=>{(e=e.target).classList.contains("modal")&&this.closeModal()})}initTemplate(){document.querySelector("."+this.templateName)&&(this.template=document.querySelector("."+this.templateName),this.container.innerHTML=this.template.innerHTML)}initForms(){var e;this.modal.querySelector("form")&&(e=this.modal.querySelector("form").id,new Form(e))}openModal(){this.modal.classList.add("opened"),document.body.classList.add("_locked"),this.initTemplate(),this.initAdditionals(),showPassword(),this.initForms(),this.listenCloseTriggers(),this.listenOpenTriggersModal()}closeModal(){this.modal.classList.remove("opened"),document.body.classList.remove("_locked")}listenCardRadio(){this.cardRadios=this.modal.querySelectorAll(".modal__radio input"),this.cardRadioSmall=this.modal.querySelector('[data-cardsize="small"]'),this.cardRadioSmall.click(),this.cardRadios.forEach(e=>{this.countChars("small"),e.addEventListener("change",()=>{"big"==e.dataset.cardsize?this.countChars("big"):"small"==e.dataset.cardsize&&this.countChars("small")})})}countChars(e){if(this.textareaBig=this.modal.querySelector(".modal__textarea.textAreaBig"),this.textareaSmall=this.modal.querySelector(".modal__textarea.textAreaSmall"),this.textareaBigImg=this.modal.querySelector(".cardBig"),this.textareaSmallImg=this.modal.querySelector(".cardSmall"),this.counterElement=this.modal.querySelector(".modal__counter"),this.textareaBig.value="",this.textareaSmall.value="","big"==e){this.textareaBig.classList.remove("hidden"),this.textareaSmall.classList.add("hidden"),this.textareaBigImg.classList.remove("hidden"),this.textareaSmallImg.classList.add("hidden");let t=300;this.counterElement.textContent="0/"+t,this.textareaBig.addEventListener("input",()=>{let e=this.textareaBig.value.length;e>=t&&(this.textareaBig.value=this.textareaBig.value.slice(0,t),e=t),this.counterElement.textContent=e+"/"+t})}else if("small"==e){this.textareaBig.classList.add("hidden"),this.textareaSmall.classList.remove("hidden"),this.textareaBigImg.classList.add("hidden"),this.textareaSmallImg.classList.remove("hidden");this.counterElement.textContent="0/80",this.textareaSmall.addEventListener("input",()=>{let e=this.textareaSmall.value.length;80<=e&&(this.textareaSmall.value=this.textareaSmall.value.slice(0,80),e=80),this.counterElement.textContent=e+"/80"})}}initSlick(){$(".modal__content .item__add-items").slick({slidesToShow:4,dots:!0,arrows:!1,infinite:!1,draggable:!0,swipe:!0,swipeToSlide:!0,responsive:[{breakpoint:1500,settings:{slidesToShow:3}},{breakpoint:1130,settings:{slidesToShow:2}},{breakpoint:760,settings:{slidesToShow:1.1}}]});const e=this.modal.querySelector(".item__slider-arrow.arr-left"),t=(e.addEventListener("click",()=>{$(".modal__content .item__add-items").slick("slickPrev")}),this.modal.querySelector(".item__slider-arrow.arr-right"));t.addEventListener("click",()=>{$(".modal__content .item__add-items").slick("slickNext")})}addedItem(){this.addedImg=this.modal.querySelector(".addedItemImg"),this.mainItemImg=document.querySelectorAll(".item__slider-main-slide img")[0].src,this.addedImg.src=this.mainItemImg}initAdditionals(){this.modal.querySelector(".modal__textarea")&&this.listenCardRadio(),this.modal.querySelector(".item__add-items")&&this.initSlick(),this.modal.querySelector(".addedItemImg")&&this.addedItem()}init(){this.initAdditionals(),this.listenOpenTriggers(),this.listenCloseTriggers()}}const modal=new Modal;function lkTabs(){const r=document.querySelectorAll(".lk__tab"),i=document.querySelectorAll(".lk__page");r.forEach(e=>{e.addEventListener("click",e=>{const t=e.target,s=(r.forEach(e=>e.classList.remove("tab-active")),t.classList.add("tab-active"),t.dataset.tab);i.forEach(e=>{e.classList.add("hidden"),e.dataset.page==s&&e.classList.remove("hidden")})})})}function orderTabs(){const r=document.querySelectorAll(".orders__tab"),i=document.querySelectorAll(".order__page");r.forEach(e=>{e.addEventListener("click",e=>{const t=e.target,s=(r.forEach(e=>e.classList.remove("active-orders")),t.classList.add("active-orders"),t.dataset.order);i.forEach(e=>{e.classList.add("hidden"),e.dataset.order==s&&e.classList.remove("hidden")})})})}function basketCardTextareas(){const t=document.querySelector(".basket__add .textAreaSmall"),s=document.querySelector(".basket__add .textAreaBig"),e=document.querySelectorAll(".basket__add .basket__add-radio[data-radio]"),r=document.querySelector(".basket__add .basket__add-radio [data-fert]"),i=(r.checked=!1,document.querySelector(".basket__add .basket__add-counter")),o=document.querySelector(".basket__add-textAreas");function a(){i.textContent="0/80",t.addEventListener("input",()=>{let e=t.value.length;80<=e&&(t.value=t.value.slice(0,80),e=80),i.textContent=e+"/80"})}t.value="",s.value="",a(),e.forEach(e=>{e.querySelector('input[type="radio"]').checked=!1,e.addEventListener("click",()=>{t.value="",s.value="",o.classList.remove("hidden"),"small"==e.dataset.radio?(s.classList.add("hidden"),t.classList.remove("hidden"),a()):"big"==e.dataset.radio&&(s.classList.remove("hidden"),t.classList.add("hidden"),i.textContent="0/300",s.addEventListener("input",()=>{let e=s.value.length;300<=e&&(t.value=s.value.slice(0,300),e=300),i.textContent=e+"/300"}))})})}if(lkTabs(),orderTabs(),document.querySelector(".basket__add")&&basketCardTextareas(),document.querySelector(".basketAddItems")){$(".basketAddItems").slick({slidesToShow:4,dots:!1,arrows:!1,infinite:!1,draggable:!0,swipe:!0,swipeToSlide:!0,responsive:[{breakpoint:1300,settings:{slidesToShow:3}},{breakpoint:1e3,settings:{slidesToShow:2,dots:!0}},{breakpoint:670,settings:{slidesToShow:1}}]});const ua=document.querySelector(".basket__addItems .item__add-filters .item__slider-arrow.arr-left"),va=(ua.addEventListener("click",()=>{$(".basketAddItems").slick("slickPrev")}),document.querySelector(".basket__addItems .item__add-filters .item__slider-arrow.arr-right"));va.addEventListener("click",()=>{$(".basketAddItems").slick("slickNext")})}function clearFields(){document.querySelectorAll("input[type=radio]").forEach(e=>e.checked=!1),document.getElementById("order-form")&&document.querySelectorAll("input[type=text]").forEach(e=>e.value="")}function pickupSelect(){document.querySelector(".pickup__select")&&(select=document.querySelector(".pickup__select"),selectOptions=document.querySelector(".pickup__select-options"),selectInput=document.querySelector(".pickup__select-input"),selectOption=document.querySelectorAll(".pickup__select-item"),select.addEventListener("mouseover",e=>{selectOptions.classList.add("options-show")}),select.addEventListener("mouseleave",e=>{selectOptions.classList.remove("options-show")}),selectOption.forEach(e=>{e.addEventListener("click",e=>{selectOption.forEach(e=>{e.classList.remove("option-selected")}),(e=e.target).classList.add("option-selected"),selectInput.textContent=e.textContent,selectInput.dataset.selected=e.textContent})}))}function deliveryOptions(){const t=document.querySelectorAll(".order__delivery-filter"),s=document.querySelector(".order__courier"),r=document.querySelector(".order__pickup");t.forEach(e=>{e.addEventListener("click",()=>{t.forEach(e=>{e.classList.remove("active-filter")}),e.classList.add("active-filter"),s.classList.add("hidden"),r.classList.add("hidden"),"Доставка курьером"==e.dataset.delivery?s.classList.remove("hidden"):"Самовывоз"==e.dataset.delivery&&r.classList.remove("hidden")})})}function accordeonInit(){const s=document.querySelectorAll(".accordeon__item");s.forEach(t=>{t.addEventListener("click",e=>{s.forEach(e=>{e.classList.remove("expand")}),t.classList.add("expand")})})}clearFields(),pickupSelect(),deliveryOptions(),document.querySelector(".accordeon")&&accordeonInit();class MobMenu{constructor(){this.burger=document.querySelector(".burger"),this.menu=document.querySelector(".mob-menu"),this.overlay=document.querySelector(".overlay"),this.menuOpened=!1,this.init()}openMenu(){this.menu.classList.add("mob-active"),this.overlay.classList.add("overlay-active"),this.burger.classList.add("active-burger"),document.body.classList.add("_locked"),this.menuOpened=!0}closeMenu(){this.menu.classList.remove("mob-active"),this.overlay.classList.remove("overlay-active"),this.burger.classList.remove("active-burger"),document.body.classList.remove("_locked"),this.menuOpened=!1}triggerOpen(){this.burger.addEventListener("click",()=>{this.menuOpened?this.closeMenu():this.openMenu()}),this.overlay.addEventListener("click",()=>{this.closeMenu()})}init(){this.triggerOpen()}}const mobmenu=new MobMenu;function sliderVideo(){const e=document.querySelectorAll(".item__slider-main-slide.video video");0<e.length&&e.forEach(t=>{const e=t.closest(".video"),s=e.querySelector(".play-btn");e.addEventListener("click",e=>{t.paused||t.ended?(s.classList.add("unvis"),t.play()):(s.classList.remove("unvis"),t.pause())})})}if(document.querySelector(".item")&&sliderVideo(),document.querySelector(".headerMob")){const Ra=document.querySelector(".btnMobBouqetScroll").addEventListener("click",()=>{var e=document.querySelector(".catalog").offsetTop;window.scrollTo({top:e,behavior:"smooth"})}),Sa=document.querySelector(".btnConstructScroll").addEventListener("click",()=>{var e=document.querySelector(".construct").offsetTop;window.scrollTo({top:e,behavior:"smooth"})}),Ta=document.querySelector(".btnBouqetScroll").addEventListener("click",()=>{var e=document.querySelector(".catalog").offsetTop;window.scrollTo({top:e,behavior:"smooth"})})}function cropText(){const e=document.querySelectorAll("[data-crop]");e.forEach(e=>{const t=e.textContent;var s;30<t.length&&(s=t.substring(0,30).trim()+"...",e.textContent=s)})}function showPassword(){const e=document.querySelectorAll(".eyes");0<e.length&&e.forEach(t=>{t.addEventListener("click",()=>{const e=t.parentNode.querySelector(".modal__input");t.classList.contains("active")?(e.setAttribute("type","password"),t.classList.remove("active")):(e.setAttribute("type","text"),t.classList.add("active"))})})}function formStartInit(){if(document.querySelector(".construct")){const e=document.querySelector(".construct__panel");e.querySelectorAll(".color__input-wrap")[0].click(),e.querySelectorAll(".lenght__radio")[0].click(),e.querySelectorAll(".quant__input")[0].value=5,e.querySelectorAll(".quant__range")[0].value=5,e.querySelectorAll(".package__radio")[0].click(),e.querySelectorAll(".green__radio")[0].click()}if(document.querySelector(".item-page .construct__panel")){const t=document.querySelector(".construct__panel");t.querySelectorAll(".color__input-wrap")[0].click(),t.querySelectorAll(".lenght__radio")[0].click(),t.querySelectorAll(".quant__radio")[0].click(),t.querySelectorAll(".package__radio")[0].click(),t.querySelectorAll(".green__radio")[0].click()}}cropText(),showPassword(),formStartInit();class Form{constructor(e){this.form=document.getElementById(e),this.init()}deleteErrors(){const e=this.form.querySelectorAll("._error-txt"),t=(e.forEach(e=>{const t=e.parentNode;t.removeChild(e)}),this.form.querySelectorAll("input[type=text], input[type=tel], input[type=password]"));if(t.forEach(e=>{e.classList.remove("_error-input")}),this.form.querySelector(".error-wrap")&&this.form.querySelectorAll(".error-wrap").forEach(e=>e.textContent=""),"lk-form"==this.form.id){const s=this.form.querySelector(".oldpass-error-wrap");s.textContent=""}}createErrAuth(){if("auth-form"==this.form.id){this.form.querySelectorAll(".modal__input").forEach(e=>{e.classList.add("_error-input")});let e=document.createElement("span");e.textContent="Не правильный логин или пароль",e.classList.add("_error-txt");const t=this.form.querySelector(".error-wrap");t.appendChild(e)}}createError(e){this.form.id;e.forEach(e=>{const t=e.closest(".input-wrap");let s=document.createElement("span");s.textContent="Обязательное поле",s.classList.add("_error-txt"),e.classList.add("_error-input"),t.appendChild(s)})}validateForm(){const e=this.form.querySelectorAll("[data-required]");let t=[];return this.deleteErrors(),e.forEach(e=>{""===e.value.trim()&&t.push(e)}),!(0<t.length)||(this.createError(t),!1)}validatePasswords(){const t=this.form.querySelectorAll("[data-newpass]"),s=this.form.querySelector(".pass-error-wrap");var e=t[0].value==t[1].value,r=t[0].value,i=/^(?=.*[a-zA-Z])(?=.*[0-9])/.test(r),o=/^[a-zA-Z0-9]+$/.test(r),r=r.length,r=8<=r&&r<=25;if(t.forEach(e=>e.classList.remove("_error-input")),e){if(o&&r&&i)return!0;{let e=document.createElement("span");return e.textContent="Пароль должен быть 8-25 символов",e.classList.add("_error-txt"),s.appendChild(e),(e=document.createElement("span")).textContent="содержать латинские буквы и цифры",e.classList.add("_error-txt"),s.appendChild(e),t.forEach(e=>e.classList.add("_error-input")),!1}}{let e=document.createElement("span");return e.textContent="Пароли не совпадают",e.classList.add("_error-txt"),t.forEach(e=>e.classList.add("_error-input")),s.appendChild(e),!1}}oldPassWrong(){if("lk-form"==this.form.id){const t=this.form.querySelector(".oldpass-error-wrap"),s=t.parentNode.querySelector(".profile__input");let e=document.createElement("span");e.textContent="Пароль не верный",e.classList.add("_error-txt"),t.appendChild(e),s.classList.add("_error-input")}}policyChecked(){var e=this.form.querySelector(".profile__checkbox-input");const t=this.form.querySelector(".policy-err");if(e.checked)return!0;{let e=document.createElement("span");return e.textContent="Ознакомьтесь с политикой конфиденциальности",e.classList.add("_error-txt"),t.appendChild(e),!1}}validateEmail(){const t=this.form.querySelector("input[name=email]");var e=t.value;if(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/.test(e))return!0;{console.log("email not val");const s=t.closest(".input-wrap");let e=document.createElement("span");return e.textContent="Введите верный Email",e.classList.add("_error-txt"),t.classList.add("_error-input"),s.appendChild(e),!1}}createSuccsessMsg(){if("lk-form"==this.form.id){console.log(this.form.id);const e=this.form.querySelector(".profile-succsess-msg");e.textContent="Изменения успешно внесены"}else"reg-form"==this.form.id&&document.querySelector(".regThanksLink").click();"callback-form"==this.form.id&&document.querySelector(".callbackThanksLink").click()}listenSubmit(){this.form.addEventListener("submit",e=>{if((e.preventDefault(),this.validateForm())&&((!this.form.querySelector("input[name=email]")||""==this.form.querySelector("input[name=email]").value||this.validateEmail())&&("reg-form"!=this.form.id&&"lk-form"!=this.form.id||this.validatePasswords())&&("reg-form"==this.form.id&&(grecaptcha.getResponse().length?(console.log(2),$("#recaptchaError").text("")):(console.log(1),$("#recaptchaError").text("* Вы не прошли проверку капчей"))),"lk-form"!=this.form.id||this.policyChecked()))){const t=new XMLHttpRequest;e=new FormData(this.form);console.log(e),console.log("send form data"),"order-form"==this.form.id?t.open("POST","local/ajax/order.php"):"auth-form"==this.form.id?t.open("POST","/local/ajax/auth.php"):"reg-form"==this.form.id?t.open("POST","/local/ajax/reg.php"):"callback-form"==this.form.id?t.open("POST","/local/ajax/callback.php"):"lk-form"==this.form.id?t.open("POST","/local/ajax/lk.php"):"restore-form"==this.form.id?t.open("POST","/local/ajax/restore.php"):t.open("POST","/local/ajax/test.php"),t.onload=()=>{200===t.status?console.log(t.responseText):"noauth"==t.responseText?(console.error("Ошибка: ",t.status),this.createErrAuth()):"oldpasswrong"==t.responseText?this.oldPassWrong():(this.createSuccsessMsg(),console.log(t.responseText))},t.send(e),this.form.classList.add("sent"),this.form.reset()}})}maskInit(){var e,t;this.form.querySelector("input[name=phone]")&&(e=this.form.querySelector("input[name=phone]"),IMask(e,{mask:"+{7}(000) 000-00-00"})),this.form.querySelector("input[name=date]")&&(e=this.form.querySelector("input[name=date]"),t={mask:Date,min:new Date(1990,0,1),max:new Date(2020,0,1),lazy:!1},IMask(e,t)),this.form.querySelector("input[name=time]")&&(e=this.form.querySelector("input[name=time]"),t={overwrite:!0,autofix:!0,mask:"HH:MM",blocks:{HH:{mask:IMask.MaskedRange,placeholderChar:"HH",from:0,to:23,maxLength:2},MM:{mask:IMask.MaskedRange,placeholderChar:"MM",from:0,to:59,maxLength:2}}},IMask(e,t))}init(){this.listenSubmit(),this.maskInit()}}function constructImages(){const e=document.querySelectorAll(".color__input-wrap"),t=document.querySelector(".construct__img img");e.forEach(e=>{e.addEventListener("click",()=>{t.src=e.dataset.img})})}function sizesSelect(){if(document.querySelector(".construct__sizes")){const i=document.querySelectorAll("[data-sizeselect]");document.querySelectorAll("[data-size]");i.forEach(r=>{r.addEventListener("click",()=>{i.forEach(e=>e.classList.remove("active-size"));var e=r.dataset.sizeselect;r.classList.add("active-size");const t=document.querySelectorAll("[data-size]"),s=document.querySelectorAll('[data-size="'+e+'"]');t.forEach(e=>e.classList.add("hidden")),s.forEach(e=>e.classList.remove("hidden"))})}),i[0].click()}}document.querySelector(".item")&&(formItem=new Form("item-form")),document.querySelectorAll("form").forEach(e=>{e.id&&new Form(e.id)}),document.querySelector(".construct")&&constructImages(),sizesSelect();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
